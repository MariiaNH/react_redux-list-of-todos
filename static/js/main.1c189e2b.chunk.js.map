{"version":3,"sources":["types/Filter.ts","store/currentTodo.ts","store/loading.ts","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","payload","type","rootReducer","combineReducers","loading","state","action","todo","selectors","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","todos","selectedTodo","useSelector","dispatch","useDispatch","className","map","id","title","completed","isSelected","classNames","onClick","seletedTodoActions","TodoFilter","filter","selectFilter","onQueryChange","search","value","onChange","target","All","Active","Completed","placeholder","style","pointerEvents","Boolean","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoaded","setIsLoaded","user","setUser","useEffect","userId","userFromServer","href","email","name","App","initialTodos","setInitialTodos","setTodos","setFilter","setSearch","todosFromServer","loadingActions","prevTodos","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c189e2b.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype SetSelectedTodo = {\n  type: 'SELECT_TODO',\n  payload: Todo | null,\n};\n\ntype UnsetSelectedTodo = {\n  type: 'UNSELECT_TODO',\n  payload: null,\n};\n\ntype Action = (\n  SetSelectedTodo | UnsetSelectedTodo\n);\n\nexport const selectedTodoReducer = (state = null, action: Action) => {\n  switch (action.type) {\n    case 'SELECT_TODO':\n      return action.payload;\n\n    case 'UNSELECT_TODO':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  setSelectedTodo: (payload: Todo | null): SetSelectedTodo => ({\n    type: 'SELECT_TODO',\n    payload,\n  }),\n\n  unsetSelectedTodo: (payload: null): UnsetSelectedTodo => ({\n    type: 'UNSELECT_TODO',\n    payload,\n  }),\n};\n","type StartLoadingAction = {\n  type: 'START_LOADING',\n};\n\ntype FinishLoadingAction = {\n  type: 'FINISH_LOADING',\n};\n\ntype Action = (\n  StartLoadingAction | FinishLoadingAction\n);\n\nexport const LoadingReducer = (state = false, action: Action) => {\n  switch (action.type) {\n    case 'START_LOADING':\n      return true;\n\n    case 'FINISH_LOADING':\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({\n    type: 'START_LOADING',\n  }),\n\n  finishLoading: (): FinishLoadingAction => ({\n    type: 'FINISH_LOADING',\n  }),\n};\n","import {\n  legacy_createStore as createStore,\n  combineReducers,\n  applyMiddleware,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Todo } from '../types/Todo';\nimport { selectedTodoReducer } from './currentTodo';\nimport { LoadingReducer } from './loading';\n\ntype RootState = {\n  todo: Todo | null;\n  loading: boolean;\n};\n\nconst rootReducer = combineReducers({\n  loading: LoadingReducer,\n  todo: selectedTodoReducer,\n});\n\nexport const selectors = {\n  isLoading: (state: RootState) => state.loading,\n  getTodo: (state: RootState) => state.todo,\n};\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { selectors } from '../../store';\nimport { actions as seletedTodoActions } from '../../store/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const selectedTodo = useSelector(selectors.getTodo);\n  const dispatch = useDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          const isSelected = selectedTodo?.id === id;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className=\"\"\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(\n                    seletedTodoActions.setSelectedTodo(todo),\n                  )}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames(\n                        'far',\n                        {\n                          'fa-eye': !isSelected,\n                          'fa-eye-slash': isSelected,\n                        },\n                      )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  filter: Filter,\n  selectFilter: (value: Filter) => void,\n  search: string,\n  onQueryChange: (value: string) => void,\n};\nexport const TodoFilter: FC<Props> = ({\n  filter,\n  selectFilter,\n  onQueryChange,\n  search,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filter}\n          onChange={({ target }) => selectFilter(target.value as Filter)}\n        >\n          <option value={Filter.All}>All</option>\n          <option value={Filter.Active}>Active</option>\n          <option value={Filter.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        value={search}\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        onChange={({ target }) => onQueryChange(target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {Boolean(search) && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQueryChange('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = `${BASE_URL}${url}.json`;\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { selectors } from '../../store';\nimport { actions as seletedTodoActions } from '../../store/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const selectedTodo = useSelector(selectors.getTodo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo?.userId).then((userFromServer) => {\n        setUser(userFromServer);\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoaded\n        ? (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(seletedTodoActions\n                  .setSelectedTodo(null))}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className=\"has-text-danger\">\n                  {selectedTodo?.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )\n        : <Loader />}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Todo } from './types/Todo';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Filter } from './types/Filter';\nimport { selectors } from './store';\nimport { actions as loadingActions } from './store/loading';\n\nexport const App: React.FC = () => {\n  const isLoaded = useSelector(selectors.isLoading);\n  const selectedTodo = useSelector(selectors.getTodo);\n  const dispatch = useDispatch();\n\n  const [initialTodos, setInitialTodos] = useState<Todo[]>([]);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<Filter>(Filter.All);\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setInitialTodos(todosFromServer);\n      setTodos(todosFromServer);\n      dispatch(loadingActions.startLoading());\n    });\n  }, []);\n\n  useEffect(() => {\n    switch (filter) {\n      case Filter.All:\n        setTodos(initialTodos);\n        break;\n\n      case Filter.Active:\n        setTodos([...initialTodos].filter(todo => !todo.completed));\n\n        break;\n\n      case Filter.Completed:\n        setTodos([...initialTodos].filter(todo => todo.completed));\n\n        break;\n\n      default:\n        break;\n    }\n\n    setTodos(\n      prevTodos => prevTodos.filter(\n        todo => todo.title.toLowerCase().includes(search.toLowerCase()),\n      ),\n    );\n  }, [filter, search]);\n\n  const handleFilterSelect = (value: Filter) => {\n    setFilter(value);\n  };\n\n  const handleQueryChange = (value: string) => {\n    setSearch(value);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={filter}\n                selectFilter={handleFilterSelect}\n                search={search}\n                onQueryChange={handleQueryChange}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded && <Loader />}\n              {todos.length > 0 && (\n                <TodoList\n                  todos={todos}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}